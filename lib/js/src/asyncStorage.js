// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var AsyncStorage = require("@react-native-community/async-storage");

function toOption(x) {
  return Promise.resolve((x == null) ? undefined : Js_primitive.some(x));
}

function map_cb(cb, err, value) {
  return Curry._2(cb, err === null ? undefined : Js_primitive.some(err), (value == null) ? undefined : Js_primitive.some(value));
}

function getItem(key, callback, _) {
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.getItem(key, (function (param, param$1) {
                    return map_cb(cb, param, param$1);
                  })).then(toOption);
  } else {
    return AsyncStorage.default.getItem(key, undefined).then(toOption);
  }
}

function setItem(key, value, callback, _) {
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.setItem(key, value, (function (param) {
                  return Curry._1(cb, param === null ? undefined : Js_primitive.some(param));
                }));
  } else {
    return AsyncStorage.default.setItem(key, value, undefined);
  }
}

function removeItem(key, callback, _) {
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.removeItem(key, (function (param) {
                  return Curry._1(cb, param === null ? undefined : Js_primitive.some(param));
                }));
  } else {
    return AsyncStorage.default.removeItem(key, undefined);
  }
}

function mergeItem(key, value, callback, _) {
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.mergeItem(key, value, (function (param) {
                  return Curry._1(cb, param === null ? undefined : Js_primitive.some(param));
                }));
  } else {
    return AsyncStorage.default.mergeItem(key, value, undefined);
  }
}

function clear(callback, _) {
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.clear((function (param) {
                  return Curry._1(cb, param === null ? undefined : Js_primitive.some(param));
                }));
  } else {
    return AsyncStorage.default.clear(undefined);
  }
}

function getAllKeys(callback, _) {
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.getAllKeys((function (param, param$1) {
                    return map_cb(cb, param, param$1);
                  })).then(toOption);
  } else {
    return AsyncStorage.default.getAllKeys(undefined).then(toOption);
  }
}

function multiGet(keys, callback, _) {
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.multiGet(keys, (function (param, param$1) {
                    return map_cb(cb, param, param$1);
                  })).then(toOption);
  } else {
    return AsyncStorage.default.multiGet(keys, undefined).then(toOption);
  }
}

function multiSet(keyValues, callback, _) {
  var combine = function (param) {
    return /* array */[
            param[0],
            param[1]
          ];
  };
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.multiSet($$Array.map(combine, keyValues), (function (param) {
                  return Curry._1(cb, param === null ? undefined : Js_primitive.some(param));
                }));
  } else {
    return AsyncStorage.default.multiSet($$Array.map(combine, keyValues), undefined);
  }
}

function multiRemove(keys, callback, _) {
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.multiRemove(keys, (function (param) {
                  return Curry._1(cb, param === null ? undefined : Js_primitive.some(param));
                }));
  } else {
    return AsyncStorage.default.multiRemove(keys, undefined);
  }
}

function multiMerge(keyValues, callback, _) {
  var combine = function (param) {
    return /* array */[
            param[0],
            param[1]
          ];
  };
  if (callback !== undefined) {
    var cb = callback;
    return AsyncStorage.default.multiMerge($$Array.map(combine, keyValues), (function (param) {
                  return Curry._1(cb, param === null ? undefined : Js_primitive.some(param));
                }));
  } else {
    return AsyncStorage.default.multiMerge($$Array.map(combine, keyValues), undefined);
  }
}

exports.getItem = getItem;
exports.setItem = setItem;
exports.removeItem = removeItem;
exports.mergeItem = mergeItem;
exports.clear = clear;
exports.getAllKeys = getAllKeys;
exports.multiGet = multiGet;
exports.multiSet = multiSet;
exports.multiRemove = multiRemove;
exports.multiMerge = multiMerge;
/* @react-native-community/async-storage Not a pure module */
